__start:
__text_start:
    0033 E5CF      LDI	R28,0x5F
    0034 E0D4      LDI	R29,4
    0035 BFCD      OUT	0x3D,R28
    0036 BFDE      OUT	0x3E,R29
    0037 51C0      SUBI	R28,0x10
    0038 40D0      SBCI	R29,0
    0039 EA0A      LDI	R16,0xAA
    003A 8308      STD	Y+0,R16
    003B 2400      CLR	R0
    003C E6E0      LDI	R30,0x60
    003D E0F0      LDI	R31,0
    003E E010      LDI	R17,0
    003F 36E2      CPI	R30,0x62
    0040 07F1      CPC	R31,R17
    0041 F011      BEQ	0x0044
    0042 9201      ST	R0,Z+
    0043 CFFB      RJMP	0x003F
    0044 8300      STD	Z+0,R16
    0045 E6E5      LDI	R30,0x65
    0046 E0F0      LDI	R31,0
    0047 E6A0      LDI	R26,0x60
    0048 E0B0      LDI	R27,0
    0049 E010      LDI	R17,0
    004A 36E5      CPI	R30,0x65
    004B 07F1      CPC	R31,R17
    004C F021      BEQ	0x0051
    004D 95C8      LPM
    004E 9631      ADIW	R30,1
    004F 920D      ST	R0,X+
    0050 CFF9      RJMP	0x004A
    0051 940E0255  CALL	_main
_exit:
    0053 CFFF      RJMP	_exit
_ePutstr:
  l                    --> R20
  i                    --> R22
  ptr                  --> R10
  y                    --> R12
  x                    --> R14
    0054 940E0345  CALL	push_gset5
    0056 2EC2      MOV	R12,R18
    0057 2EE0      MOV	R14,R16
    0058 9721      SBIW	R28,1
    0059 84AB      LDD	R10,Y+11
    005A 84BC      LDD	R11,Y+12
FILE: d:\MYDOCU~1\ac15-1\ac15-1.c
(0001) #include <iom16v.h>			
(0002) #include <macros.h>
(0003) //-----------------------------------------------
(0004) #define uchar unsigned char	
(0005) #define uint unsigned int
(0006) //-------------------引脚电平的宏定义---------
(0007) #define LCM_RS_1 PORTB|=BIT(PB0)	
(0008) #define LCM_RS_0 PORTB&=~BIT(PB0) 
(0009) #define LCM_RW_1 PORTB|=BIT(PB1)	
(0010) #define LCM_RW_0 PORTB&=~BIT(PB1) 
(0011) #define LCM_EN_1 PORTB|=BIT(PB2)	
(0012) #define LCM_EN_0 PORTB&=~BIT(PB2)  
(0013) #define SCL_1 PORTC|=BIT(PC0)
(0014) #define SCL_0 PORTC&=~BIT(PC0)
(0015) #define SDA_1 PORTC|=BIT(PC1)
(0016) #define SDA_0 PORTC&=~BIT(PC1)
(0017) //======================================
(0018) #define PIN_SDA (PINC&0x02)
(0019) #define DataPort PORTA		
(0020) #define Busy 0x80			
(0021) #define xtal 8   			
(0022) #define Some_NOP();  _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
(0023) //=====================================
(0024) const uchar str0[]={"Write : "};//待显字符串
(0025) const uchar str1[]={"Read : "};//待显字符串
(0026) //========函数声明=========
(0027) void Delay_1ms(void);
(0028) void Delay_nms(uint n);
(0029) void WaitForEnable(void);
(0030) void LcdWriteData(uchar W);
(0031) void LcdWriteCommand(uchar CMD,uchar Attribc);
(0032) void InitLcd(void);
(0033) void Display(uchar dd);
(0034) void DisplayOneChar(uchar x,uchar y,uchar Wdata);
(0035) void ePutstr(uchar x,uchar y,uchar const *ptr);
(0036) void port_init(void);
(0037) //**********************显示指定座标的一串字符子函数**************
(0038) void ePutstr(uchar x,uchar y,uchar const *ptr)
(0039) {
(0040) uchar i,l=0;
    005B 2744      CLR	R20
    005C C001      RJMP	0x005E
(0041) 	while(ptr[l]>31){l++;}
    005D 9543      INC	R20
    005E 2FE4      MOV	R30,R20
    005F 27FF      CLR	R31
    0060 0DEA      ADD	R30,R10
    0061 1DFB      ADC	R31,R11
    0062 91E4      LPM	R30,0(Z)
    0063 E18F      LDI	R24,0x1F
    0064 178E      CP	R24,R30
    0065 F3B8      BCS	0x005D
(0042) 	for(i=0;i<l;i++){
    0066 2766      CLR	R22
    0067 C014      RJMP	0x007C
(0043) 	DisplayOneChar(x++,y,ptr[i]);
    0068 2FE6      MOV	R30,R22
    0069 27FF      CLR	R31
    006A 0DEA      ADD	R30,R10
    006B 1DFB      ADC	R31,R11
    006C 91E4      LPM	R30,0(Z)
    006D 83E8      STD	Y+0,R30
    006E 2D2C      MOV	R18,R12
    006F 2C2E      MOV	R2,R14
    0070 2D82      MOV	R24,R2
    0071 5F8F      SUBI	R24,0xFF
    0072 2EE8      MOV	R14,R24
    0073 2D02      MOV	R16,R2
    0074 D01E      RCALL	_DisplayOneChar
(0044) 	if(x==16){
    0075 2D8E      MOV	R24,R14
    0076 3180      CPI	R24,0x10
    0077 F419      BNE	0x007B
(0045) 		x=0;y^=1;
    0078 24EE      CLR	R14
    0079 E081      LDI	R24,1
    007A 26C8      EOR	R12,R24
    007B 9563      INC	R22
    007C 1764      CP	R22,R20
    007D F350      BCS	0x0068
    007E 9621      ADIW	R28,1
    007F 940E0342  CALL	pop_gset5
    0081 9508      RET
_LocateXY:
  temp                 --> R20
  posy                 --> R22
  posx                 --> R10
    0082 940E0349  CALL	push_gset3
    0084 2F62      MOV	R22,R18
    0085 2EA0      MOV	R10,R16
(0046) 	}
(0047)   }
(0048) }
(0049) //*******************显示光标定位子函数******************
(0050) void LocateXY(char posx,char posy)
(0051) {
(0052) uchar temp;
(0053) 	temp&=0x7f;
    0086 774F      ANDI	R20,0x7F
(0054) 	temp=posx&0x0f;
    0087 2D4A      MOV	R20,R10
    0088 704F      ANDI	R20,0xF
(0055) 	posy&=0x01;
    0089 7061      ANDI	R22,1
(0056) 	if(posy)temp|=0x40;
    008A F009      BEQ	0x008C
    008B 6440      ORI	R20,0x40
(0057) 	temp|=0x80;
    008C 6840      ORI	R20,0x80
(0058) 	LcdWriteCommand(temp,0);
    008D 2722      CLR	R18
    008E 2F04      MOV	R16,R20
    008F D031      RCALL	_LcdWriteCommand
    0090 940E033F  CALL	pop_gset3
    0092 9508      RET
_DisplayOneChar:
  Wdata                --> Y+4
  y                    --> R22
  x                    --> R20
    0093 940E034B  CALL	push_gset2
    0095 2F62      MOV	R22,R18
    0096 2F40      MOV	R20,R16
(0059) }
(0060) //*******************显示指定座标的一个字符子函数*******************
(0061) void DisplayOneChar(uchar x,uchar y,uchar Wdata)
(0062) {
(0063) LocateXY(x,y);
    0097 2F26      MOV	R18,R22
    0098 2F04      MOV	R16,R20
    0099 DFE8      RCALL	_LocateXY
(0064) LcdWriteData(Wdata);
    009A 810C      LDD	R16,Y+4
    009B D038      RCALL	_LcdWriteData
    009C 940E033C  CALL	pop_gset2
    009E 9508      RET
(0065) }
(0066) //*******************LCD初始化子函数*********************
(0067) void InitLcd(void) 
(0068) {
(0069) LcdWriteCommand(0x38,0); 
_InitLcd:
    009F 2722      CLR	R18
    00A0 E308      LDI	R16,0x38
    00A1 D01F      RCALL	_LcdWriteCommand
(0070) Delay_nms(5);
    00A2 E005      LDI	R16,5
    00A3 E010      LDI	R17,0
    00A4 D05C      RCALL	_Delay_nms
(0071) LcdWriteCommand(0x38,0); 
    00A5 2722      CLR	R18
    00A6 E308      LDI	R16,0x38
    00A7 D019      RCALL	_LcdWriteCommand
(0072) Delay_nms(5);
    00A8 E005      LDI	R16,5
    00A9 E010      LDI	R17,0
    00AA D056      RCALL	_Delay_nms
(0073) LcdWriteCommand(0x38,0); 
    00AB 2722      CLR	R18
    00AC E308      LDI	R16,0x38
    00AD D013      RCALL	_LcdWriteCommand
(0074) Delay_nms(5);
    00AE E005      LDI	R16,5
    00AF E010      LDI	R17,0
    00B0 D050      RCALL	_Delay_nms
(0075) LcdWriteCommand(0x38,1); 
    00B1 E021      LDI	R18,1
    00B2 E308      LDI	R16,0x38
    00B3 D00D      RCALL	_LcdWriteCommand
(0076) LcdWriteCommand(0x08,1); 
    00B4 E021      LDI	R18,1
    00B5 E008      LDI	R16,0x8
    00B6 D00A      RCALL	_LcdWriteCommand
(0077) LcdWriteCommand(0x01,1); 
    00B7 E021      LDI	R18,1
    00B8 E001      LDI	R16,1
    00B9 D007      RCALL	_LcdWriteCommand
(0078) LcdWriteCommand(0x06,1); 
    00BA E021      LDI	R18,1
    00BB E006      LDI	R16,6
    00BC D004      RCALL	_LcdWriteCommand
(0079) LcdWriteCommand(0x0c,1); 
    00BD E021      LDI	R18,1
    00BE E00C      LDI	R16,0xC
    00BF D001      RCALL	_LcdWriteCommand
    00C0 9508      RET
_LcdWriteCommand:
  Attribc              --> R22
  CMD                  --> R20
    00C1 940E034B  CALL	push_gset2
    00C3 2F62      MOV	R22,R18
    00C4 2F40      MOV	R20,R16
(0080) }
(0081) //********************写命令到LCM子函数********************
(0082) void LcdWriteCommand(uchar CMD,uchar Attribc)
(0083) {
(0084) if(Attribc)WaitForEnable();
    00C5 2366      TST	R22
    00C6 F009      BEQ	0x00C8
    00C7 D01C      RCALL	_WaitForEnable
(0085) LCM_RS_0;LCM_RW_0;_NOP();
    00C8 98C0      CBI	0x18,0
    00C9 98C1      CBI	0x18,1
    00CA 0000      NOP
(0086) DataPort=CMD;_NOP();
    00CB BB4B      OUT	0x1B,R20
    00CC 0000      NOP
(0087) LCM_EN_1;_NOP();_NOP();LCM_EN_0;
    00CD 9AC2      SBI	0x18,2
    00CE 0000      NOP
    00CF 0000      NOP
    00D0 98C2      CBI	0x18,2
    00D1 940E033C  CALL	pop_gset2
    00D3 9508      RET
_LcdWriteData:
  dataW                --> R20
    00D4 940E034D  CALL	push_gset1
    00D6 2F40      MOV	R20,R16
(0088) }
(0089) //*******************写数据到LCM子函数********************
(0090) void LcdWriteData(uchar dataW)
(0091) {
(0092) WaitForEnable();
    00D7 D00C      RCALL	_WaitForEnable
(0093) LCM_RS_1;LCM_RW_0;_NOP();
    00D8 9AC0      SBI	0x18,0
    00D9 98C1      CBI	0x18,1
    00DA 0000      NOP
(0094) DataPort=dataW;_NOP();
    00DB BB4B      OUT	0x1B,R20
    00DC 0000      NOP
(0095) LCM_EN_1;_NOP();_NOP();LCM_EN_0;
    00DD 9AC2      SBI	0x18,2
    00DE 0000      NOP
    00DF 0000      NOP
    00E0 98C2      CBI	0x18,2
    00E1 940E0350  CALL	pop_gset1
    00E3 9508      RET
(0096) }
(0097) //*******************检测LCD忙信号子函数*********************
(0098) void WaitForEnable(void)
(0099) {
(0100) uchar val;
(0101) DataPort=0xff;
_WaitForEnable:
  val                  --> R16
    00E4 EF8F      LDI	R24,0xFF
    00E5 BB8B      OUT	0x1B,R24
(0102) LCM_RS_0;LCM_RW_1;_NOP();
    00E6 98C0      CBI	0x18,0
    00E7 9AC1      SBI	0x18,1
    00E8 0000      NOP
(0103) LCM_EN_1;_NOP();_NOP();
    00E9 9AC2      SBI	0x18,2
    00EA 0000      NOP
    00EB 0000      NOP
(0104) DDRA=0x00;
    00EC 2422      CLR	R2
    00ED BA2A      OUT	0x1A,R2
(0105) val=PINA;
    00EE B309      IN	R16,0x19
    00EF C001      RJMP	0x00F1
(0106) while(val&Busy)val=PINA;
    00F0 B309      IN	R16,0x19
    00F1 FD07      SBRC	R16,7
    00F2 CFFD      RJMP	0x00F0
(0107) LCM_EN_0;
    00F3 98C2      CBI	0x18,2
(0108) DDRA=0xff;
    00F4 EF8F      LDI	R24,0xFF
    00F5 BB8A      OUT	0x1A,R24
    00F6 9508      RET
(0109) }
(0110) //****************************************
(0111) void Delay_1ms(void)		//1mS延时子函数
(0112) { uint i;
(0113)  for(i=1;i<(uint)(xtal*143-2);i++)
_Delay_1ms:
  i                    --> R16
    00F7 E001      LDI	R16,1
    00F8 E010      LDI	R17,0
    00F9 C002      RJMP	0x00FC
    00FA 5F0F      SUBI	R16,0xFF
    00FB 4F1F      SBCI	R17,0xFF
    00FC 3706      CPI	R16,0x76
    00FD E0E4      LDI	R30,4
    00FE 071E      CPC	R17,R30
    00FF F3D0      BCS	0x00FA
    0100 9508      RET
_Delay_nms:
  i                    --> R20
  n                    --> R22
    0101 940E034B  CALL	push_gset2
    0103 01B8      MOVW	R22,R16
(0114)     ;
(0115) }
(0116) //====================================
(0117) void Delay_nms(uint n)		//n*1mS延时子函数
(0118) {
(0119)  uint i=0;
    0104 2744      CLR	R20
    0105 2755      CLR	R21
    0106 C003      RJMP	0x010A
(0120)    while(i<n)
(0121)    {Delay_1ms();
    0107 DFEF      RCALL	_Delay_1ms
(0122)     i++;
    0108 5F4F      SUBI	R20,0xFF
    0109 4F5F      SBCI	R21,0xFF
    010A 1746      CP	R20,R22
    010B 0757      CPC	R21,R23
    010C F3D0      BCS	0x0107
    010D 940E033C  CALL	pop_gset2
    010F 9508      RET
(0123)    }
(0124) }
(0125) /*****************端口初始化********************/
(0126) void port_init(void)
(0127) {
(0128)  PORTA = 0x00;
_port_init:
    0110 2422      CLR	R2
    0111 BA2B      OUT	0x1B,R2
(0129)  DDRA  = 0xFF;
    0112 EF8F      LDI	R24,0xFF
    0113 BB8A      OUT	0x1A,R24
(0130)  PORTB = 0x00;
    0114 BA28      OUT	0x18,R2
(0131)  DDRB  = 0xFF;
    0115 BB87      OUT	0x17,R24
(0132)  PORTC = 0x00; 
    0116 BA25      OUT	0x15,R2
(0133)  DDRC  = 0x03;
    0117 E083      LDI	R24,3
    0118 BB84      OUT	0x14,R24
(0134)  PORTD = 0xFF;
    0119 EF8F      LDI	R24,0xFF
    011A BB82      OUT	0x12,R24
(0135)  DDRD  = 0x00;
    011B BA21      OUT	0x11,R2
    011C 9508      RET
(0136) }
(0137) /*************************************/
(0138) char com_data;	
(0139) uchar cnt;		
(0140) void delay_iic(int n);	
(0141) uchar rd_24c01(char a);	
(0142) void wr_24c01(char a,char b);
(0143) /******************扫描按键***************/
(0144) uchar scan_key(void)		
(0145) {					
(0146) uchar temp;			
(0147) temp=PIND;				
_scan_key:
  temp                 --> R16
    011D B300      IN	R16,0x10
(0148) return temp;			
    011E 9508      RET
_delay:
  i                    --> R20
  j                    --> R22
  k                    --> R16
    011F 940E034B  CALL	push_gset2
(0149) }					
(0150) /***************延时子函数******************/
(0151) void delay(uint k)		
(0152) {					
(0153) uint i,j;			
(0154) for(i=0;i<k;i++)			
    0121 2744      CLR	R20
    0122 2755      CLR	R21
    0123 C00B      RJMP	0x012F
(0155) {for(j=0;j<121;j++)		
    0124 2766      CLR	R22
    0125 2777      CLR	R23
    0126 C002      RJMP	0x0129
    0127 5F6F      SUBI	R22,0xFF
    0128 4F7F      SBCI	R23,0xFF
    0129 3769      CPI	R22,0x79
    012A E0E0      LDI	R30,0
    012B 077E      CPC	R23,R30
    012C F3D0      BCS	0x0127
    012D 5F4F      SUBI	R20,0xFF
    012E 4F5F      SBCI	R21,0xFF
    012F 1740      CP	R20,R16
    0130 0751      CPC	R21,R17
    0131 F390      BCS	0x0124
    0132 940E033C  CALL	pop_gset2
    0134 9508      RET
(0156) {;}}				
(0157) }					
(0158) /*****************启动读写时序子函数******************/
(0159) void start(void)			
(0160) {DDRC=0x03;					
_start:
    0135 E083      LDI	R24,3
    0136 BB84      OUT	0x14,R24
(0161) SDA_1;Some_NOP();
    0137 9AA9      SBI	0x15,1
    0138 0000      NOP
    0139 0000      NOP
    013A 0000      NOP
    013B 0000      NOP
    013C 0000      NOP
    013D 0000      NOP
    013E 0000      NOP
    013F 0000      NOP
(0162) SCL_1;Some_NOP();
    0140 9AA8      SBI	0x15,0
    0141 0000      NOP
    0142 0000      NOP
    0143 0000      NOP
    0144 0000      NOP
    0145 0000      NOP
    0146 0000      NOP
    0147 0000      NOP
    0148 0000      NOP
(0163) SDA_0;Some_NOP();
    0149 98A9      CBI	0x15,1
    014A 0000      NOP
    014B 0000      NOP
    014C 0000      NOP
    014D 0000      NOP
    014E 0000      NOP
    014F 0000      NOP
    0150 0000      NOP
    0151 0000      NOP
(0164) SCL_0;Some_NOP();
    0152 98A8      CBI	0x15,0
    0153 0000      NOP
    0154 0000      NOP
    0155 0000      NOP
    0156 0000      NOP
    0157 0000      NOP
    0158 0000      NOP
    0159 0000      NOP
    015A 0000      NOP
    015B 9508      RET
(0165) }					
(0166) //********************停止操作子函数*********************
(0167) void stop(void)			
(0168) {	DDRC=0x03;			
_stop:
    015C E083      LDI	R24,3
    015D BB84      OUT	0x14,R24
(0169) SDA_0;Some_NOP();
    015E 98A9      CBI	0x15,1
    015F 0000      NOP
    0160 0000      NOP
    0161 0000      NOP
    0162 0000      NOP
    0163 0000      NOP
    0164 0000      NOP
    0165 0000      NOP
    0166 0000      NOP
(0170) SCL_1;Some_NOP();
    0167 9AA8      SBI	0x15,0
    0168 0000      NOP
    0169 0000      NOP
    016A 0000      NOP
    016B 0000      NOP
    016C 0000      NOP
    016D 0000      NOP
    016E 0000      NOP
    016F 0000      NOP
(0171) SDA_1;Some_NOP();
    0170 9AA9      SBI	0x15,1
    0171 0000      NOP
    0172 0000      NOP
    0173 0000      NOP
    0174 0000      NOP
    0175 0000      NOP
    0176 0000      NOP
    0177 0000      NOP
    0178 0000      NOP
    0179 9508      RET
(0172) }				
(0173) //************应答子函数*************
(0174) void ack(void)			
(0175) {	DDRC=0x03;				
_ack:
    017A E083      LDI	R24,3
    017B BB84      OUT	0x14,R24
(0176) SCL_1;Some_NOP();
    017C 9AA8      SBI	0x15,0
    017D 0000      NOP
    017E 0000      NOP
    017F 0000      NOP
    0180 0000      NOP
    0181 0000      NOP
    0182 0000      NOP
    0183 0000      NOP
    0184 0000      NOP
(0177) SCL_0;Some_NOP();
    0185 98A8      CBI	0x15,0
    0186 0000      NOP
    0187 0000      NOP
    0188 0000      NOP
    0189 0000      NOP
    018A 0000      NOP
    018B 0000      NOP
    018C 0000      NOP
    018D 0000      NOP
    018E 9508      RET
_shift8:
  j                    --> R20
  i                    --> R22
  a                    --> R16
    018F 940E034B  CALL	push_gset2
(0178) }					
(0179) //*************写入8位子函数*************
(0180) void shift8(char a)		
(0181) {					
(0182) uchar i,j;			
(0183) DDRC=0x03;
    0191 E083      LDI	R24,3
    0192 BB84      OUT	0x14,R24
(0184) com_data=a;			
    0193 93000061  STS	com_data,R16
(0185) for(i=0;i<8;i++)	
    0195 2766      CLR	R22
    0196 C01F      RJMP	0x01B6
(0186) {	
(0187) j=com_data&0x80;
    0197 91400061  LDS	R20,com_data
    0199 7840      ANDI	R20,0x80
(0188) if(j==0)SDA_0;
    019A F411      BNE	0x019D
    019B 98A9      CBI	0x15,1
    019C C001      RJMP	0x019E
(0189) else SDA_1;
    019D 9AA9      SBI	0x15,1
(0190) 
(0191) SCL_1;Some_NOP();
    019E 9AA8      SBI	0x15,0
    019F 0000      NOP
    01A0 0000      NOP
    01A1 0000      NOP
    01A2 0000      NOP
    01A3 0000      NOP
    01A4 0000      NOP
    01A5 0000      NOP
    01A6 0000      NOP
(0192) SCL_0;Some_NOP();
    01A7 98A8      CBI	0x15,0
    01A8 0000      NOP
    01A9 0000      NOP
    01AA 0000      NOP
    01AB 0000      NOP
    01AC 0000      NOP
    01AD 0000      NOP
    01AE 0000      NOP
    01AF 0000      NOP
(0193) com_data=com_data<<1;		
    01B0 90200061  LDS	R2,com_data
    01B2 0C22      LSL	R2
    01B3 92200061  STS	com_data,R2
    01B5 9563      INC	R22
    01B6 3068      CPI	R22,0x8
    01B7 F2F8      BCS	0x0197
    01B8 940E033C  CALL	pop_gset2
    01BA 9508      RET
_rd_24c01:
  command              --> R20
  i                    --> R20
  a                    --> R22
    01BB 940E034B  CALL	push_gset2
    01BD 2F60      MOV	R22,R16
(0194) }					
(0195) }					
(0196) //**************读24C01A中a地址单元的数据************
(0197) uchar rd_24c01(char a)		
(0198) {					
(0199) uchar i,command;		
(0200) DDRC=0x03;
    01BE E083      LDI	R24,3
    01BF BB84      OUT	0x14,R24
(0201) SDA_1;Some_NOP();
    01C0 9AA9      SBI	0x15,1
    01C1 0000      NOP
    01C2 0000      NOP
    01C3 0000      NOP
    01C4 0000      NOP
    01C5 0000      NOP
    01C6 0000      NOP
    01C7 0000      NOP
    01C8 0000      NOP
(0202) SCL_0;Some_NOP();
    01C9 98A8      CBI	0x15,0
    01CA 0000      NOP
    01CB 0000      NOP
    01CC 0000      NOP
    01CD 0000      NOP
    01CE 0000      NOP
    01CF 0000      NOP
    01D0 0000      NOP
    01D1 0000      NOP
(0203) start();				
    01D2 DF62      RCALL	_start
(0204) command=160;			
    01D3 EA40      LDI	R20,0xA0
(0205) shift8(command);		
    01D4 2F04      MOV	R16,R20
    01D5 DFB9      RCALL	_shift8
(0206) ack();				
    01D6 DFA3      RCALL	_ack
(0207) shift8(a);			
    01D7 2F06      MOV	R16,R22
    01D8 DFB6      RCALL	_shift8
(0208) ack();				
    01D9 DFA0      RCALL	_ack
(0209) start();				
    01DA DF5A      RCALL	_start
(0210) command=161;			
    01DB EA41      LDI	R20,0xA1
(0211) shift8(command);		
    01DC 2F04      MOV	R16,R20
    01DD DFB1      RCALL	_shift8
(0212) ack();				
    01DE DF9B      RCALL	_ack
(0213) 
(0214) SDA_1;Some_NOP();	
    01DF 9AA9      SBI	0x15,1
    01E0 0000      NOP
    01E1 0000      NOP
    01E2 0000      NOP
    01E3 0000      NOP
    01E4 0000      NOP
    01E5 0000      NOP
    01E6 0000      NOP
    01E7 0000      NOP
(0215) for(i=0;i<8;i++)			
    01E8 2744      CLR	R20
    01E9 C026      RJMP	0x0210
(0216) {
(0217) DDRC=0x01;				
    01EA E081      LDI	R24,1
    01EB BB84      OUT	0x14,R24
(0218) com_data=com_data<<1;		
    01EC 90200061  LDS	R2,com_data
    01EE 0C22      LSL	R2
    01EF 92200061  STS	com_data,R2
(0219) SCL_1;Some_NOP();	
    01F1 9AA8      SBI	0x15,0
    01F2 0000      NOP
    01F3 0000      NOP
    01F4 0000      NOP
    01F5 0000      NOP
    01F6 0000      NOP
    01F7 0000      NOP
    01F8 0000      NOP
    01F9 0000      NOP
(0220) if(PIN_SDA==0)com_data&=0xfe;
    01FA 9999      SBIC	0x13,1
    01FB C005      RJMP	0x0201
    01FC 2D82      MOV	R24,R2
    01FD 7F8E      ANDI	R24,0xFE
    01FE 93800061  STS	com_data,R24
    0200 C005      RJMP	0x0206
(0221) else com_data|=0x01;
    0201 91800061  LDS	R24,com_data
    0203 6081      ORI	R24,1
    0204 93800061  STS	com_data,R24
(0222) SCL_0;Some_NOP();
    0206 98A8      CBI	0x15,0
    0207 0000      NOP
    0208 0000      NOP
    0209 0000      NOP
    020A 0000      NOP
    020B 0000      NOP
    020C 0000      NOP
    020D 0000      NOP
    020E 0000      NOP
    020F 9543      INC	R20
    0210 3048      CPI	R20,0x8
    0211 F2C0      BCS	0x01EA
(0223) }					
(0224) stop();				
    0212 DF49      RCALL	_stop
(0225) return(com_data);	
    0213 91000061  LDS	R16,com_data
    0215 940E033C  CALL	pop_gset2
    0217 9508      RET
_wr_24c01:
  command              --> R10
  b                    --> R20
  a                    --> R22
    0218 940E0349  CALL	push_gset3
    021A 2F42      MOV	R20,R18
    021B 2F60      MOV	R22,R16
(0226) }					
(0227) //********将RAM中b地址单元的数据写入24C01A中a地址单元中***********
(0228) void wr_24c01(char a,char b)	
(0229) {					
(0230) uchar command;		
(0231) DDRC=0x03;
    021C E083      LDI	R24,3
    021D BB84      OUT	0x14,R24
(0232) SDA_1;Some_NOP();
    021E 9AA9      SBI	0x15,1
    021F 0000      NOP
    0220 0000      NOP
    0221 0000      NOP
    0222 0000      NOP
    0223 0000      NOP
    0224 0000      NOP
    0225 0000      NOP
    0226 0000      NOP
(0233) SCL_0;Some_NOP();
    0227 98A8      CBI	0x15,0
    0228 0000      NOP
    0229 0000      NOP
    022A 0000      NOP
    022B 0000      NOP
    022C 0000      NOP
    022D 0000      NOP
    022E 0000      NOP
    022F 0000      NOP
(0234) start();				
    0230 DF04      RCALL	_start
(0235) command=160;			
    0231 EA80      LDI	R24,0xA0
    0232 2EA8      MOV	R10,R24
(0236) shift8(command);		
    0233 2F08      MOV	R16,R24
    0234 DF5A      RCALL	_shift8
(0237) ack();				
    0235 DF44      RCALL	_ack
(0238) shift8(a);				
    0236 2F06      MOV	R16,R22
    0237 DF57      RCALL	_shift8
(0239) ack();				
    0238 DF41      RCALL	_ack
(0240) shift8(b);				
    0239 2F04      MOV	R16,R20
    023A DF54      RCALL	_shift8
(0241) ack();				
    023B DF3E      RCALL	_ack
(0242) stop();				
    023C DF1F      RCALL	_stop
(0243) Some_NOP();
    023D 0000      NOP
    023E 0000      NOP
    023F 0000      NOP
    0240 0000      NOP
    0241 0000      NOP
    0242 0000      NOP
    0243 0000      NOP
    0244 0000      NOP
    0245 940E033F  CALL	pop_gset3
    0247 9508      RET
_delay_iic:
  i                    --> R20
  n                    --> R16
    0248 940E034D  CALL	push_gset1
(0244) }					
(0245) //**************延时子函数***********
(0246) void delay_iic(int n)		
(0247) {					
(0248) int i;				
(0249) for(i=1;i<n;i++){;}		
    024A E041      LDI	R20,1
    024B E050      LDI	R21,0
    024C C002      RJMP	0x024F
    024D 5F4F      SUBI	R20,0xFF
    024E 4F5F      SBCI	R21,0xFF
    024F 1740      CP	R20,R16
    0250 0751      CPC	R21,R17
    0251 F3DC      BLT	0x024D
    0252 940E0350  CALL	pop_gset1
    0254 9508      RET
_main:
  key_val              --> R10
  rd_val               --> R22
  wr_val               --> R20
    0255 9722      SBIW	R28,2
(0250) }					
(0251) //******************************************
(0252) void main(void)				
(0253) {
(0254)  	 uchar key_val,wr_val=0,rd_val=0;	
    0256 2744      CLR	R20
    0257 2766      CLR	R22
(0255) 	 port_init();
    0258 DEB7      RCALL	_port_init
(0256)     Delay_nms(400);			
    0259 E900      LDI	R16,0x90
    025A E011      LDI	R17,1
    025B DEA5      RCALL	_Delay_nms
(0257) 	InitLcd();				
    025C DE42      RCALL	_InitLcd
(0258) 	LcdWriteCommand(0x01,1); 
    025D E021      LDI	R18,1
    025E E001      LDI	R16,1
    025F DE61      RCALL	_LcdWriteCommand
(0259) 	LcdWriteCommand(0x0c,1);	
    0260 E021      LDI	R18,1
    0261 E00C      LDI	R16,0xC
    0262 DE5E      RCALL	_LcdWriteCommand
(0260) 	ePutstr(0,0,str0);  
    0263 E584      LDI	R24,0x54
    0264 E090      LDI	R25,0
    0265 8399      STD	Y+1,R25
    0266 8388      STD	Y+0,R24
    0267 2722      CLR	R18
    0268 2700      CLR	R16
    0269 DDEA      RCALL	_ePutstr
(0261) 	Delay_nms(10);
    026A E00A      LDI	R16,0xA
    026B E010      LDI	R17,0
    026C DE94      RCALL	_Delay_nms
(0262) 	ePutstr(0,1,str1);   
    026D E58D      LDI	R24,0x5D
    026E E090      LDI	R25,0
    026F 8399      STD	Y+1,R25
    0270 8388      STD	Y+0,R24
    0271 E021      LDI	R18,1
    0272 2700      CLR	R16
    0273 DDE0      RCALL	_ePutstr
(0263) 	Delay_nms(10);
    0274 E00A      LDI	R16,0xA
    0275 E010      LDI	R17,0
    0276 DE8A      RCALL	_Delay_nms
    0277 C0A9      RJMP	0x0321
(0264) 	/********************************************/
(0265) 		while(1)           
(0266) 		{
(0267) 		  DisplayOneChar(9,0,wr_val/100+0x30);
    0278 E614      LDI	R17,0x64
    0279 2F04      MOV	R16,R20
    027A 940E0326  CALL	div8u
    027C 2F80      MOV	R24,R16
    027D 5D80      SUBI	R24,0xD0
    027E 8388      STD	Y+0,R24
    027F 2722      CLR	R18
    0280 E009      LDI	R16,0x9
    0281 DE11      RCALL	_DisplayOneChar
(0268) 		   Delay_nms(10);
    0282 E00A      LDI	R16,0xA
    0283 E010      LDI	R17,0
    0284 DE7C      RCALL	_Delay_nms
(0269) 		   DisplayOneChar(10,0,(wr_val/10)%10+0x30); 
    0285 E01A      LDI	R17,0xA
    0286 2F04      MOV	R16,R20
    0287 940E0326  CALL	div8u
    0289 E01A      LDI	R17,0xA
    028A 940E0324  CALL	mod8u
    028C 2F80      MOV	R24,R16
    028D 5D80      SUBI	R24,0xD0
    028E 8388      STD	Y+0,R24
    028F 2722      CLR	R18
    0290 E00A      LDI	R16,0xA
    0291 DE01      RCALL	_DisplayOneChar
(0270) 		   Delay_nms(10); 
    0292 E00A      LDI	R16,0xA
    0293 E010      LDI	R17,0
    0294 DE6C      RCALL	_Delay_nms
(0271) 		   DisplayOneChar(11,0,wr_val%10+0x30);	  
    0295 E01A      LDI	R17,0xA
    0296 2F04      MOV	R16,R20
    0297 940E0324  CALL	mod8u
    0299 2F80      MOV	R24,R16
    029A 5D80      SUBI	R24,0xD0
    029B 8388      STD	Y+0,R24
    029C 2722      CLR	R18
    029D E00B      LDI	R16,0xB
    029E DDF4      RCALL	_DisplayOneChar
(0272) 		   Delay_nms(10); 
    029F E00A      LDI	R16,0xA
    02A0 E010      LDI	R17,0
    02A1 DE5F      RCALL	_Delay_nms
(0273) 	   
(0274) 		   DisplayOneChar(8,1,rd_val/100+0x30);	  
    02A2 E614      LDI	R17,0x64
    02A3 2F06      MOV	R16,R22
    02A4 940E0326  CALL	div8u
    02A6 2F80      MOV	R24,R16
    02A7 5D80      SUBI	R24,0xD0
    02A8 8388      STD	Y+0,R24
    02A9 E021      LDI	R18,1
    02AA E008      LDI	R16,0x8
    02AB DDE7      RCALL	_DisplayOneChar
(0275) 		   Delay_nms(10); 
    02AC E00A      LDI	R16,0xA
    02AD E010      LDI	R17,0
    02AE DE52      RCALL	_Delay_nms
(0276) 		   DisplayOneChar(9,1,(rd_val/10%10)+0x30);	 
    02AF E01A      LDI	R17,0xA
    02B0 2F06      MOV	R16,R22
    02B1 940E0326  CALL	div8u
    02B3 E01A      LDI	R17,0xA
    02B4 940E0324  CALL	mod8u
    02B6 2F80      MOV	R24,R16
    02B7 5D80      SUBI	R24,0xD0
    02B8 8388      STD	Y+0,R24
    02B9 E021      LDI	R18,1
    02BA E009      LDI	R16,0x9
    02BB DDD7      RCALL	_DisplayOneChar
(0277) 		   Delay_nms(10); 
    02BC E00A      LDI	R16,0xA
    02BD E010      LDI	R17,0
    02BE DE42      RCALL	_Delay_nms
(0278) 		   DisplayOneChar(10,1,rd_val%10+0x30);	 
    02BF E01A      LDI	R17,0xA
    02C0 2F06      MOV	R16,R22
    02C1 940E0324  CALL	mod8u
    02C3 2F80      MOV	R24,R16
    02C4 5D80      SUBI	R24,0xD0
    02C5 8388      STD	Y+0,R24
    02C6 E021      LDI	R18,1
    02C7 E00A      LDI	R16,0xA
    02C8 DDCA      RCALL	_DisplayOneChar
(0279) 		   Delay_nms(10); 
    02C9 E00A      LDI	R16,0xA
    02CA E010      LDI	R17,0
    02CB DE35      RCALL	_Delay_nms
(0280) 		   
(0281) 		   key_val=scan_key();
    02CC DE50      RCALL	_scan_key
    02CD 2EA0      MOV	R10,R16
(0282) 		   switch(key_val)
    02CE 2CCA      MOV	R12,R10
    02CF 24DD      CLR	R13
    02D0 01C6      MOVW	R24,R12
    02D1 3B8F      CPI	R24,0xBF
    02D2 E0E0      LDI	R30,0
    02D3 079E      CPC	R25,R30
    02D4 F111      BEQ	0x02F7
    02D5 EB8F      LDI	R24,0xBF
    02D6 158C      CP	R24,R12
    02D7 059D      CPC	R25,R13
    02D8 F034      BLT	0x02DF
    02D9 01C6      MOVW	R24,R12
    02DA 378F      CPI	R24,0x7F
    02DB E0E0      LDI	R30,0
    02DC 079E      CPC	R25,R30
    02DD F129      BEQ	0x0303
    02DE C02F      RJMP	0x030E
    02DF 01C6      MOVW	R24,R12
    02E0 3D8F      CPI	R24,0xDF
    02E1 E0E0      LDI	R30,0
    02E2 079E      CPC	R25,R30
    02E3 F071      BEQ	0x02F2
    02E4 3D8F      CPI	R24,0xDF
    02E5 E0E0      LDI	R30,0
    02E6 079E      CPC	R25,R30
    02E7 F134      BLT	0x030E
    02E8 01C6      MOVW	R24,R12
    02E9 3E8F      CPI	R24,0xEF
    02EA E0E0      LDI	R30,0
    02EB 079E      CPC	R25,R30
    02EC F009      BEQ	0x02EE
    02ED C020      RJMP	0x030E
(0283) 	   	   {				
(0284) 	   	   	case 0xef:if(wr_val<255)wr_val++;break;
    02EE 3F4F      CPI	R20,0xFF
    02EF F4F0      BCC	0x030E
    02F0 9543      INC	R20
    02F1 C01C      RJMP	0x030E
(0285) 	   		case 0xdf:if(wr_val>0)wr_val--;break;
    02F2 2422      CLR	R2
    02F3 1624      CP	R2,R20
    02F4 F4C8      BCC	0x030E
    02F5 954A      DEC	R20
    02F6 C017      RJMP	0x030E
(0286) 	   		case 0xbf:wr_24c01(10,wr_val);delay_iic(2500);
    02F7 2F24      MOV	R18,R20
    02F8 E00A      LDI	R16,0xA
    02F9 DF1E      RCALL	_wr_24c01
    02FA EC04      LDI	R16,0xC4
    02FB E019      LDI	R17,0x9
    02FC DF4B      RCALL	_delay_iic
(0287) 				 DisplayOneChar(15,0,0xef);break;	
    02FD EE8F      LDI	R24,0xEF
    02FE 8388      STD	Y+0,R24
    02FF 2722      CLR	R18
    0300 E00F      LDI	R16,0xF
    0301 DD91      RCALL	_DisplayOneChar
    0302 C00B      RJMP	0x030E
(0288) 	   		case 0x7f:rd_val=rd_24c01(10);delay_iic(2500);
    0303 E00A      LDI	R16,0xA
    0304 DEB6      RCALL	_rd_24c01
    0305 2F60      MOV	R22,R16
    0306 EC04      LDI	R16,0xC4
    0307 E019      LDI	R17,0x9
    0308 DF3F      RCALL	_delay_iic
(0289) 			     DisplayOneChar(15,1,0xef);break;	
    0309 EE8F      LDI	R24,0xEF
    030A 8388      STD	Y+0,R24
    030B E021      LDI	R18,1
    030C E00F      LDI	R16,0xF
    030D DD85      RCALL	_DisplayOneChar
(0290) 	   		default:break;		
(0291) 	   		}				
(0292) 			Delay_nms(200); 
    030E EC08      LDI	R16,0xC8
    030F E010      LDI	R17,0
    0310 DDF0      RCALL	_Delay_nms
(0293) 			DisplayOneChar(15,0,0x20);Delay_nms(10); 
    0311 E280      LDI	R24,0x20
    0312 8388      STD	Y+0,R24
    0313 2722      CLR	R18
    0314 E00F      LDI	R16,0xF
    0315 DD7D      RCALL	_DisplayOneChar
    0316 E00A      LDI	R16,0xA
    0317 E010      LDI	R17,0
    0318 DDE8      RCALL	_Delay_nms
(0294) 			DisplayOneChar(15,1,0x20);Delay_nms(10); 
FILE: <library>
    0319 E280      LDI	R24,0x20
    031A 8388      STD	Y+0,R24
    031B E021      LDI	R18,1
    031C E00F      LDI	R16,0xF
    031D DD75      RCALL	_DisplayOneChar
    031E E00A      LDI	R16,0xA
    031F E010      LDI	R17,0
    0320 DDE0      RCALL	_Delay_nms
    0321 CF56      RJMP	0x0278
    0322 9622      ADIW	R28,2
    0323 9508      RET
mod8u:
    0324 9468      BSET	6
    0325 C001      RJMP	xdiv8u
div8u:
    0326 94E8      BCLR	6
xdiv8u:
    0327 932A      ST	R18,-Y
    0328 92FA      ST	R15,-Y
    0329 92EA      ST	R14,-Y
    032A 24FF      CLR	R15
    032B 24EE      CLR	R14
    032C E120      LDI	R18,0x10
    032D 0F00      LSL	R16
    032E 1CFF      ROL	R15
    032F 1CEE      ROL	R14
    0330 16E1      CP	R14,R17
    0331 F010      BCS	0x0334
    0332 1AE1      SUB	R14,R17
    0333 9503      INC	R16
    0334 952A      DEC	R18
    0335 F7B9      BNE	0x032D
    0336 F40E      BRTC	0x0338
    0337 2D0E      MOV	R16,R14
    0338 90E9      LD	R14,Y+
    0339 90F9      LD	R15,Y+
    033A 9129      LD	R18,Y+
    033B 9508      RET
pop_gset2:
    033C E0E2      LDI	R30,2
    033D 940C0351  JMP	pop
pop_gset3:
    033F E0E4      LDI	R30,4
    0340 940C0351  JMP	pop
pop_gset5:
    0342 27EE      CLR	R30
    0343 940C0351  JMP	pop
push_gset5:
    0345 92FA      ST	R15,-Y
    0346 92EA      ST	R14,-Y
push_gset4:
    0347 92DA      ST	R13,-Y
    0348 92CA      ST	R12,-Y
push_gset3:
    0349 92BA      ST	R11,-Y
    034A 92AA      ST	R10,-Y
push_gset2:
    034B 937A      ST	R23,-Y
    034C 936A      ST	R22,-Y
push_gset1:
    034D 935A      ST	R21,-Y
    034E 934A      ST	R20,-Y
    034F 9508      RET
pop_gset1:
    0350 E0E1      LDI	R30,1
pop:
    0351 9149      LD	R20,Y+
    0352 9159      LD	R21,Y+
    0353 FDE0      SBRC	R30,0
    0354 9508      RET
    0355 9169      LD	R22,Y+
    0356 9179      LD	R23,Y+
    0357 FDE1      SBRC	R30,1
    0358 9508      RET
    0359 90A9      LD	R10,Y+
    035A 90B9      LD	R11,Y+
    035B FDE2      SBRC	R30,2
    035C 9508      RET
    035D 90C9      LD	R12,Y+
    035E 90D9      LD	R13,Y+
    035F FDE3      SBRC	R30,3
    0360 9508      RET
    0361 90E9      LD	R14,Y+
    0362 90F9      LD	R15,Y+
    0363 9508      RET
